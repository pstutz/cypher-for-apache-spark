plugins {
    id 'com.github.hierynomus.license' version '0.15.0' apply false
    id 'com.github.johnrengelman.shadow' version '4.0.3' apply false
    id 'com.github.alisiikh.scalastyle_2.12' version '2.1.0' apply false
    id 'me.champeau.gradle.jmh' version '0.4.8' apply false
}

apply from: 'build.params.gradle'
apply plugin: 'base'

allprojects {
    group = 'org.opencypher'
    version = ver.self
}

apply from: 'build.licenses.gradle'

subprojects {
    apply plugin: 'scala'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile group: 'org.scala-lang', name: 'scala-library', version: ver.scala.full

        // Seems we need to lock these down, otherwise we get runtime errors on reflection
        compile group: 'org.scala-lang', name: 'scala-reflect', version: ver.scala.full
        compile group: 'org.scala-lang', name: 'scala-compiler', version: ver.scala.full

        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: ver.log4j.main
        compile group: 'org.apache.logging.log4j', name: "log4j-api-scala".scala(), version: ver.log4j.scala

        testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: ver.log4j.main
        testCompile group: 'org.scalatest', name: "scalatest".scala(), version: ver.scalatest
        testCompile group: 'org.scalacheck', name: "scalacheck".scala(), version: ver.scalacheck
        testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: ver.junit.runner
    }

    test {
        useJUnit()
    }

    ext.scalacParameters = [
            "-target:jvm-$ver.jvm".toString(),
            "-deprecation",                      // Emit warning and location for usages of deprecated APIs.
            "-encoding", "utf-8",                // Specify character encoding used by source files.
            "-explaintypes",                     // Explain type errors in more detail.
            "-feature",                          // Emit warning and location for usages of features that should be imported explicitly.
            "-language:existentials",            // Existential types (besides wildcard types) can be written and inferred
            "-language:experimental.macros",     // Allow macro definition (besides implementation and application)
            "-language:higherKinds",             // Allow higher-kinded types
            "-language:implicitConversions",     // Allow definition of implicit functions called views
            "-unchecked",                        // Enable additional warnings where generated code depends on assumptions.
            "-Xcheckinit",                       // Wrap field accessors to throw an exception on uninitialized access.
            "-Xfatal-warnings",                  // Fail the compilation if there are any warnings.
            "-Xfuture",                          // Turn on future language features.
            "-Xlint:adapted-args",               // Warn if an argument list is modified to match the receiver.
            "-Xlint:by-name-right-associative",  // By-name parameter of right associative operator.
            "-Xlint:constant",                   // Evaluation of a constant arithmetic expression results in an error.
            "-Xlint:delayedinit-select",         // Selecting member of DelayedInit.
            "-Xlint:doc-detached",               // A Scaladoc comment appears to be detached from its element.
            "-Xlint:inaccessible",               // Warn about inaccessible types in method signatures.
            "-Xlint:infer-any",                  // Warn when a type argument is inferred to be `Any`.
            "-Xlint:missing-interpolator",       // A string literal appears to be missing an interpolator id.
            "-Xlint:nullary-override",           // Warn when non-nullary `def f()' overrides nullary `def f'.
            "-Xlint:nullary-unit",               // Warn when nullary methods return Unit.
            "-Xlint:option-implicit",            // Option.apply used implicit view.
            "-Xlint:package-object-classes",     // Class or object defined in package object.
            "-Xlint:poly-implicit-overload",     // Parameterized overloaded implicit methods are not visible as view bounds.
            "-Xlint:private-shadow",             // A private field (or class parameter) shadows a superclass field.
            "-Xlint:stars-align",                // Pattern sequence wildcard must align with sequence component.
            "-Xlint:type-parameter-shadow",      // A local type parameter shadows a type already in scope.
            "-Xlint:unsound-match",              // Pattern match may not be typesafe.
            "-Yno-adapted-args",                 // Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver.
            "-Ypartial-unification",             // Enable partial unification in type constructor inference
            "-Ywarn-dead-code",                  // Warn when dead code is identified.
            "-Ywarn-extra-implicit",             // Warn when more than one implicit parameter section is defined.
            "-Ywarn-inaccessible",               // Warn about inaccessible types in method signatures.
            "-Ywarn-infer-any",                  // Warn when a type argument is inferred to be `Any`.
            "-Ywarn-nullary-override",           // Warn when non-nullary `def f()' overrides nullary `def f'.
            "-Ywarn-nullary-unit",               // Warn when nullary methods return Unit.
            "-Ywarn-numeric-widen",              // Warn when numerics are widened.
            "-Ywarn-unused:implicits",           // Warn if an implicit parameter is unused.
            "-Ywarn-unused:imports",             // Warn if an import selector is not referenced.
            "-Ywarn-unused:locals",              // Warn if a local definition is unused.
//            "-Ywarn-unused:params",              // Warn if a value parameter is unused.
            "-Ywarn-unused:patvars",             // Warn if a variable bound in a pattern is unused.
            "-Ywarn-unused:privates",            // Warn if a private member is unused.
//            "-Ywarn-value-discard"               // Warn when non-Unit expression results are unused.
    ]

    tasks.withType(ScalaCompile) {
        options.encoding = 'UTF-8'
        scalaCompileOptions.additionalParameters = scalacParameters
    }

    tasks.withType(ScalaDoc) {
        scalaDocOptions.additionalParameters = scalacParameters
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from(sourceSets.main.allSource)
    }

    task docJar(type: Jar) {
        dependsOn tasks.scaladoc
        classifier = 'javadoc'
        from(tasks.scaladoc.destinationDir)
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from(sourceSets.test.output)
    }

    tasks.withType(Jar) {
        from(tasks.generateLicensesFiles) {
            into("META-INF/")
        }
    }

    task dependencySearch(type: DependencyInsightReportTask) {
        description 'Searches all projects for a dependency'
        group 'help'
    }

    task runApp {
        dependsOn tasks.classes
        group 'run'
        description 'Run a custom Scala app (use -PmainClass=com.my.package.App)'
        doLast {
            javaexec {
                classpath = sourceSets.main.runtimeClasspath
                main = project.getProperty("mainClass")
            }
        }
    }
}

apply from: 'build.publishing.gradle'
apply from: 'build.style.gradle'
